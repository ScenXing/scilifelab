Title: lims_utils documentation

Author: Maya Brandi <maya.brandi@scilifelab.se>

Date: 2013-08-21

## Description ##
A package of scripts and modules mainly built to fetch and structure 
information from lims and load information into statusdb

## scripts ##

flowcell_summary_uppload_LIMS.py
    Script to load runinfo from the lims process: 
    'Illumina Sequencing (Illumina SBS) 4.0' into the flowcell 
    database in statusdb.

project_summary_upload_LIMS.py
    Script to load project info from Lims into the project database in
    statusdb.

## modules ##

lims_utils
    A module with lims help functions

    process category dictionaries:
        In the lims_utils context, processes are categorised into 
        groups that define, or are used to define a certain type of 
        statusdb key. The categories are:

        INITALQC
        AGRINITQC
        PREPSTART
        PREPEND
        LIBVAL
        AGRLIBVAL
        SEQSTART
        SEQUENCING

    get_sequencing_info(fc):
        Input: a process object 'fc', of type 
        'Illumina Sequencing (Illumina SBS) 4.0'

        Output: A dictionary where keys are lanes 1,2,...,8, and 
        values are lane artifact udfsi.

    make_sample_artifact_maps(sample_name):
        outin: connects each out_art for a specific sample to its 
        corresponding in_art and process. one-one relation

        inout: connects each in_art for a specific sample to all its 
        corresponding out_arts and processes. one-many relation

    get_analyte_hist(analyte, outin, inout):
        Makes a history map of an analyte, using the inout-map and 
        outin-map of the corresponding sample.

helpers
    A module with other help functions

    delete_Nones(dict):
        Deletes None type items from dict.

    comp_dates(a, b):
        Dates in isoformat. Is a < b?

objectsDB
    A module for building up the project objects that build up the 
    project database on statusdb with lims as the main source of 
    information. The module store three classes:

    class ProjectDB():
        Instances of this class holds a dictionary formatted for 
        building up the project database on statusdb. Source of 
        information come from different lims artifacts and processes.
        A detailed documentation of the source of all values is found
        in the section “Definitions of keys in statusdb (source lims)”

    class ProcessInfo():
        This is a help class that takes a list of process type names.
        Eg 'Aggregate QC (Library Validation) 4.0' and forms a dict 
        with info about all processes of the type specified in runs 
        which the project has gone through. The purpose of this class
        is to store all process info related to a specific project, in
        a practical manner. This class is  

        info = {24-8460:
            {'finish_date':'2013-04-20', 
            'start_date',
            'run_id' :'24-8460',
            'samples' :{'P424_111':{in_art_id1 : [in_art1,out_art1],
                                    in_art_id2 : [in_art2, out_art2]},                                                        
                        'P424_115' : ...},
                        ...},
            '24-8480':...}
        
    class SampleDB():
        Instances of this class holds a dictionary formatted for 
        building up the samples in the project database on status db.
        Source of information come from different lims artifacts and 
        processes. A detailed documentation of the source of all 
        values is found in the section “Definitions of keys in 
        statusdb (source lims)”

